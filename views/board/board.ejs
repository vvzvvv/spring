<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%- include('../header.ejs') %>
    <link href="/stylesheets/board.css" rel="stylesheet">
    <link href="/stylesheets/style.css" rel="stylesheet">
</head>
<body>
    <div class="board-block">
        <div class="name-info">
            <div>
                <a class="nameCell"></a>
                <a class="infoCell">님</a>
            </div>
        
            <button class="toList" href="/user/emailVerification">나가기</button>
        </div>

        <div class="board-content">
            <div class="medicine-info">
                <a class="medicine-info-name"></a>
                <div class="medicine-info-content">
                    <canvas class="chart" id="line-chart" width="1500px" height="500px" ></canvas>
                </div>
            </div>
            <div class="sleep-info">
                <a class="sleep-info-name"></a>
            </div>
            <div class="exercise-info">
                <a class="exercise-info-name"></a>
            </div>
            <div class="test-info">
                <a class="test-info-name"></a>
            </div>
        </div>
    </div>
</body>  

<script>
    document.addEventListener('DOMContentLoaded', async function(){
        const userID = "<%= userID %>";
        
        const token = localStorage.getItem('token');

        if (token) {
            // 1.userID 기준으로 환자 이름, 환자 공개 동의 내용 가져오기
            const userInfo = await getUserInfo(userID);
            
            
            // 2.공개 동의 내용에 있는 것만 보여주기
            if(userInfo.medicine_agreement){
                await getMedicineInfo(userID);
            }

            if(userInfo.sleep_agreement){
                await getjSleepInfo(userID);
            }

            if(userInfo.exercise_agreement){
                await getExerciseInfo(userID);
            }

            if(userInfo.test_agreement){
                await getTestInfo(userID);
            }
        }
        else {
            window.location.href = '/user/login';
        }
    })

    async function getUserInfo(userID){
        const response = await fetch(`/board/userinfo/${userID}`, {
            method: 'GET', // or 'GET'
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const userInfo = await response.json();
        document.querySelector('.nameCell').textContent = userInfo.name;

        return userInfo;
    }

    async function getMedicineInfo(userID){
        document.querySelector('.medicine-info-name').textContent = "복용약 변화량";
        const response = await fetch(`/prescription/chart/${userID}`, {
            method: 'GET', // or 'GET'
            headers: {
                'Content-Type': 'application/json'
            }
        });

        data = response.json();
        // 라벨 생성 (날짜)
        const labels = [];
        const datasets = [];
        const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#E7E9ED', '#76A346'];

        // 데이터를 순회하며 datasets 생성
        let colorIndex = 0;
        for (const prescriptionName in data) {
            if (data.hasOwnProperty(prescriptionName)) {
                const prescriptionData = data[prescriptionName];

                const prescriptionDataset = {
                    label: prescriptionName,
                    data: [],
                    borderColor: colors[colorIndex % colors.length],
                    fill: false,
                    pointRadius: 8
                };

                prescriptionData.forEach(entry => {
                    const date = entry.prescription_date;
                    const amount = entry.prescription_amount;

                    // 날짜가 라벨에 없으면 추가
                    if (!labels.includes(date)) {
                        labels.push(date);
                    }

                    prescriptionDataset.data.push({ x: new Date(date), y: amount });
                });

                datasets.push(prescriptionDataset);
                colorIndex++;
            }
        }

        // 라벨 정렬
        labels.sort((a, b) => new Date(a) - new Date(b));

        
        // 차트 생성
        new Chart(document.getElementById("line-chart"), {
            type: 'line',
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                // 반응형으로 설정
                title: {
                    display: true,
                    text: '처방량 변화 그래프'
                },
                scales: {  
                    x: {
                        type: 'time',
                        time: {
                            unit: 'month',
                            tooltipFormat: 'YYYY.MM',
                            displayFormats: {
                                month: 'YYYY.MM'
                            }
                        },
                        ticks: {
                            //fontSize: 20
                        }
                    },
                    y: {
                        ticks: {
                            min: 0,
                            fontSize: 17
                        }
                    }
                }
            }
        });
    };

    async function getSleepInfo(userID){
        document.querySelector('.sleep-info-name').textContent = "수면 내역 변화";
    }

    async function getExerciseInfo(userID){
        document.querySelector('.exercise-info-name').textContent = "운동 내역";
    }

    async function getTestInfo(userID){
        document.querySelector('.test-info-name').textContent = "테스트 내역";
    }
</script>